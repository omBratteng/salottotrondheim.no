name: Continuous Integration

on:
  push:
    branches:
      - develop
      - feature/*

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}

jobs:
  prepare:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: ['14']
    name: "[v${{ matrix.node-version }}] prepare"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        id: cache-node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: |
          yarn install --frozen-lockfile

  check:
    runs-on: ubuntu-20.04
    needs: prepare
    strategy:
      matrix:
        node-version: ['14']
    name: "[v${{ matrix.node-version }}] check"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        id: cache-node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: |
          yarn install --frozen-lockfile

      - name: Lint
        run: |
          yarn lint

      # - name: Test
      #   env:
      #     CI: 1
      #   run: |
      #     yarn test

      # - name: Submit coverage
      #   uses: codecov/codecov-action@v1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}

  build-and-run:
    runs-on: ubuntu-20.04
    needs: prepare
    strategy:
      matrix:
        node-version: ['14']
    name: "[v${{ matrix.node-version }}] build"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        id: cache-node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
            ${{ runner.os }}-

      - name: Cache next
        id: cache-next
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: |
          yarn install --frozen-lockfile

      - name: Build
        run: |
          yarn build

      - name: Run & check status code
        run: |
          yarn start &
          sleep 5
          curl http://localhost:3000/api/_health > /dev/null

  build-docker:
    name: Build docker
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      -
        name: Docker build
        run: |
          docker buildx build . --load \
            --tag image:${{ github.sha }} \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --build-arg NPM_TOKEN=${{ secrets.NPM_TOKEN }} \
            --build-arg FONTAWESOME_TOKEN=${{ secrets.FONTAWESOME_TOKEN }}

      -
        name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.0.8
        with:
          image-ref: 'image:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
